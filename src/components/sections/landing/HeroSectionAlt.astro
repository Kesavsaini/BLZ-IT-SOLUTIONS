---
// Import the necessary dependencies
import GithubBtn from "@components/ui/buttons/GithubBtn.astro";

// Define props from Astro
const { title, subTitle, url } = Astro.props;

const btnTitle = Astro.currentLocale === "fr" ? "Continuer avec Github" : "Continue with Github";

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  url?: string;
}
---

<section
  class="relative mx-auto max-w-[85rem] px-4 pb-24 pt-10 sm:px-6 lg:px-8"
>
  <!-- Decorating SVG elements -->
  <div
    class="absolute left-0 top-[55%] scale-90 md:top-[20%] xl:left-[10%] xl:top-[25%]"
    style="transform: rotate(15deg);"
  >
    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#4f46e5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-app-window"><rect x="2" y="4" width="20" height="16" rx="2"/><path d="M10 4v4"/><path d="M2 8h20"/><path d="M6 4v4"/></svg>
  </div>
  <div class="absolute left-[85%] top-0 scale-75" style="transform: rotate(-10deg);">
    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#2563eb" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-airplay"><path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"/><path d="m12 15 5 6H7Z"/></svg>
  </div>
  <div
    class="absolute bottom-[10%] left-[60%] scale-[.6] xl:bottom-[15%] xl:left-[35%]"
    style="transform: rotate(5deg);"
  >
  <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#dc2626" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-handshake"><path d="m11 17 2 2a1 1 0 1 0 3-3"/><path d="m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4"/><path d="m21 3 1 11h-2"/><path d="M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3"/><path d="M3 4h8"/></svg>
</div>
  <div class="absolute right-[10%] bottom-[25%] scale-50" style="transform: rotate(20deg);">
    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-leaf"><path d="M6 2v6a6 6 0 0 0 6 6h6"/><path d="M9.5 9.5 8 14l-4.5 1.5"/><path d="M17.5 6.5 14 8l-1.5 4.5"/><path d="M3 22s3-2 6-2 6 2 6 2 3-2 6-2 6 2 6 2"/></svg>
  </div>
  <div class="absolute left-[5%] top-[15%] scale-75" style="transform: rotate(-25deg);">
    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#f59e0b" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-sun"><circle cx="12" cy="12" r="5"/><path d="M12 1v2"/><path d="M12 21v2"/><path d="M4.22 4.22l1.42 1.42"/><path d="M18.36 18.36l1.42 1.42"/><path d="M1 12h2"/><path d="M21 12h2"/><path d="M4.22 19.78l1.42-1.42"/><path d="M18.36 5.64l1.42-1.42"/></svg>
  </div>
  <!-- Hero Section Heading -->
  <div class="mx-auto mt-5 max-w-xl text-center">
    <h2
      class="block text-balance text-4xl font-bold leading-tight tracking-tight text-neutral-800 dark:text-neutral-200 md:text-5xl lg:text-6xl"
    >
      {title}
    </h2>
  </div>
  <!-- Hero Section Sub-heading -->
  <div class="mx-auto mt-5 max-w-3xl text-center">
    {
      subTitle && (
        <p class="text-pretty text-lg text-neutral-600 dark:text-neutral-400">
          {subTitle}
        </p>
      )
    }
  </div>
  <!-- Github Button -->
  <!-- {
    url && (
      <div class="mt-8 flex justify-center gap-3">
        <a
  class={`bg-indigo-400 p-4 rounded-md text-white hover:bg-indigo-500 transition duration-300 ease-in-out flex gap-2`}
  href={url}
  target="_blank"
  rel="noopener noreferrer"
>
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-headset"><path d="M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z"/><path d="M21 16v2a4 4 0 0 1-4 4h-5"/></svg>
  Schedule a call
</a>
      </div>
    )
  } -->
<!-- Cal inline embed code begins -->
<div style="width:100%;height:100%;overflow:scroll" class="my-12" id="my-cal-inline"></div>
<script type="text/javascript">
(function (C, A, L) {
  let p = function (a, ar) { a.q.push(ar); };
  let d = C.document;
  C.Cal = C.Cal || function () {
    let cal = C.Cal;
    let ar = arguments;
    if (!cal.loaded) {
      cal.ns = {};
      cal.q = cal.q || [];
      d.head.appendChild(d.createElement("script")).src = A;
      cal.loaded = true;
    }
    if (ar[0] === L) {
      const api = function () { p(api, arguments); };
      const namespace = ar[1];
      api.q = api.q || [];
      if (typeof namespace === "string") {
        cal.ns[namespace] = cal.ns[namespace] || api;
        p(cal.ns[namespace], ar);
        p(cal, ["initNamespace", namespace]);
      } else p(cal, ar);
      return;
    }
    p(cal, ar);
  };
})(window, "https://app.cal.com/embed/embed.js", "init");

// Initialize Cal with theme-aware config
function initializeCal() {
  const currentTheme = getTheme();
  
  Cal("init", "quick-project-call-blz-it-solutions", {
    origin: "https://cal.com",
    config: {
      theme: currentTheme,
      layout: "month_view"
    }
  });

  updateCalDisplay();
}

function getTheme() {
  return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
}

// Function to update Cal.com display
function updateCalDisplay() {
  const currentTheme = getTheme();
  
  Cal.ns["quick-project-call-blz-it-solutions"]("inline", {
    elementOrSelector: "#my-cal-inline",
    config: {
      layout: "month_view",
      theme: currentTheme
    },
    calLink: "kesavsaini/quick-project-call-blz-it-solutions",
  });

  // Update UI configuration with current theme
  Cal.ns["quick-project-call-blz-it-solutions"]("ui", {
    cssVarsPerTheme: {
      light: { "cal-brand": "#1d49bd" },
      dark: { "cal-brand": "#1d49bd" }
    },
    hideEventTypeDetails: false,
    layout: "month_view",
    theme: currentTheme
  });
}

// Watch for theme changes using MutationObserver
const observer = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    if (mutation.attributeName === 'class') {
      console.log("Theme changed to:", getTheme());
      updateCalDisplay();
    }
  });
});

// Start observing theme changes
observer.observe(document.documentElement, {
  attributes: true,
  attributeFilter: ['class']
});

// Initial setup
initializeCal();
  </script>
  <!-- Cal inline embed code ends -->
</section>
